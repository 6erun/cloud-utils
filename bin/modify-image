#!/bin/bash

VERBOSITY=0
# verbosity arguments for mount-image-callback
MIC_VERBOSITY_ARG=""
# Default values
DEFAULT_SIZE="20G"

# example usage:
# ./modify-image -f jammy-server-cloudimg-amd64.img -r script-driver-570.txt

Usage() {
	cat <<EOF
Usage: ${0##*/} [ options ] file

   supported 'file' are:
      file      : any disk format supported by qemu-nbd

   options:
    -s: Image size (default: ${DEFAULT_SIZE})
    -f: Image filename
    -c: Command to execute
    -r: Script to execute
    -i: Interactive mode
    -h: Show this help message
    -v: Increase verbosity (higher level passed to mount-image-callback)
EOF
}

bad_Usage() { Usage 1>&2; [ $# -eq 0 ] || error "$@"; exit 1; }

debug() {
	local level="$1"; shift;
	[ "${level}" -gt "${VERBOSITY}" ] && return
	error "${@}"
}

error() { echo "$@" 1>&2; }

resize_image() {
    local filename=$1
    local size=$2

    qemu-img resize "${filename}" "${size}"

    sudo modprobe nbd max_part=10
    sudo qemu-nbd -c /dev/nbd0 "${filename}"
    gparted /dev/nbd0

    # disconnect device
    sudo qemu-nbd -d /dev/nbd0
    # remove module
    sudo rmmod nbd
}

run_command() {
    local filename=$1
    local command=$2

    debug 1 "Running command: mount-image-callback --system-resolvconf '${filename}' -- chroot _MOUNTPOINT_ ${command}"
    sudo mount-image-callback --system-resolvconf --system-mounts "${filename}" -- chroot _MOUNTPOINT_ /bin/bash -c "${command}"
}

run_command_script() {
    local filename=$1
    local script=$2

    debug 1 "Running script: ${script}"
    # Create a temporary directory to mount the image
    local mount_point=$(mktemp -d)

    # Mount the image
    sudo mount-image-callback --system-resolvconf --system-mounts "${filename}" --mountpoint "${mount_point}" -- bash -c "
        # Copy the script to the mounted environment
        cp '${script}' '${mount_point}/tmp/script.sh'
        # Make it executable
        chmod +x '${mount_point}/tmp/script.sh'
        # Execute the script in chroot
        chroot '${mount_point}' /bin/bash /tmp/script.sh
    " || {
        error "Script execution failed: ${script}"
        return 1
    }
}

run_interactive_mode() {
    local filename=$1
    local fname
    fname=$(basename "$filename")
  
    debug 1 "Entering interactive mode..."
    # Start an interactive shell
    sudo mount-image-callback ${MIC_VERBOSITY_ARG} --system-resolvconf --system-mounts "${filename}" -- chroot _MOUNTPOINT_ env PS1="[\u@\h | ${fname}:\w]\\$ " /bin/bash --norc -i

}

modify_image() {
    # Parse command line options
    local size=""     #"${DEFAULT_SIZE}"
    local command="", script="", interactive=false
    local filename="$1"

	short_opts="s:c:r:ihv"
	long_opts="size:,command:,script:,interactive,help,verbose"
	getopt_out=$(getopt -n "${0##*/}" \
		-o "${short_opts}" -l "${long_opts}" -- "$@") &&
		eval set -- "${getopt_out}" ||
		{ bad_Usage; return 1; }

	while [ $# -ne 0 ]; do
		cur=${1}; next=${2};
		case "$cur" in
            -s|--size)
                size=$next
                shift
                ;;
            -c|--command)
                command=$next
                shift
                ;;
            -r|--script)
                script=$next
                shift
                ;;
            -i|--interactive)
                interactive=true
                ;;
            -v|--verbose)
                VERBOSITY=$((VERBOSITY + 1))
                ;;
            -h|--help)
                Usage ; exit 0
                ;;
        esac
        shift;
    done

    [ "${VERBOSITY}" -gt 1 ] && MIC_VERBOSITY_ARG="-$(printf 'v%.0s' $(seq 1 $((VERBOSITY - 1))))"


    # Check if mandatory filename parameter is provided
    if [ -z "${filename}" ]; then
        error "Error: filename (-f) parameter is mandatory."
        bad_Usage
    fi

    if [ -n "${size}" ]; then
        debug 1 "Resizing image to ${size}"
        resize_image "${filename}" "${size}"
    fi

    # Execute command if provided
    if [ -n "${command}" ]; then
        run_command "${filename}" "${command}" || { error "Command failed, exiting script."; exit 1; }
        #eval "${COMMAND}"
    fi

    # Execute script if provided
    if [ -n "${script}" ]; then
        run_command_script "${filename}" "${script}" || { error "Script failed, exiting script."; exit 1; }
    fi

    # Interactive mode
    if [ "${interactive}" = true ]; then
        run_interactive_mode "${filename}"
    fi
}

modify_image "$@"
