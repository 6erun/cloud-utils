#!/bin/bash

# Default values
DEFAULT_SIZE="20G"

# example usage:
# ./modify-image -f jammy-server-cloudimg-amd64.img -r script-driver-570.txt

# Function to display usage
usage() {
    echo "Usage: $0 -f filename [-s size] [-c command] [-r script] [-i]"
    echo "  -s: Image size (default: ${DEFAULT_SIZE})"
    echo "  -f: Image filename)"
    echo "  -c: Command to execute"
    echo "  -r: Script to execute"
    echo "  -i: Interactive mode"
    echo "  -h: Show this help message"
    exit 1
}

resize_image() {
    local filename=$1
    local size=$2

    qemu-img resize "${filename}" "${size}"

    sudo modprobe nbd max_part=10
    sudo qemu-nbd -c /dev/nbd0 "${filename}"
    gparted /dev/nbd0

    # disconnect device
    sudo qemu-nbd -d /dev/nbd0
    # remove module
    sudo rmmod nbd
}

run_command() {
    local filename=$1
    local command=$2

    echo "Running command: mount-image-callback --system-resolvconf '${filename}' -- chroot _MOUNTPOINT_ ${command}"
    sudo mount-image-callback --system-resolvconf --system-mounts "${filename}" -- chroot _MOUNTPOINT_ /bin/bash -c "${command}"
}

run_command_script() {
    local filename=$1
    local script=$2

    echo "Running script: ${script}"
    # Create a temporary directory to mount the image
    local mount_point=$(mktemp -d)

    # Mount the image
    sudo mount-image-callback --system-resolvconf --system-mounts "${filename}" --mountpoint "${mount_point}" -- bash -c "
        # Copy the script to the mounted environment
        cp '${script}' '${mount_point}/tmp/script.sh'
        # Make it executable
        chmod +x '${mount_point}/tmp/script.sh'
        # Execute the script in chroot
        chroot '${mount_point}' /bin/bash /tmp/script.sh
    " || {
        echo "Script execution failed: ${script}"
        return 1
    }
}

run_interactive_mode() {
    local filename=$1
    local fname
    fname=$(basename "$filename")
    
    echo "Entering interactive mode..."
    # Start an interactive shell
    sudo mount-image-callback --system-resolvconf --system-mounts "${filename}" -- chroot _MOUNTPOINT_ env PS1="[\u@\h | ${fname}:\w]\\$ " /bin/bash --norc -i
}

# Parse command line options
SIZE=""     #"${DEFAULT_SIZE}"
FILENAME=""
COMMAND=""
SCRIPT=""
INTERACTIVE=false

while getopts "s:f:c:r:ih" opt; do
    case ${opt} in
        s)
            SIZE=$OPTARG
            ;;
        f)
            FILENAME=$OPTARG
            ;;
        c)
            COMMAND=$OPTARG
            ;;
        r)
            SCRIPT=$OPTARG
            ;;
        i)
            INTERACTIVE=true
            ;;
        h|?)
            usage
            ;;
    esac
done

# Check if mandatory filename parameter is provided
if [ -z "${FILENAME}" ]; then
    echo "Error: filename (-f) parameter is mandatory."
    usage
fi

if [ -n "${SIZE}" ]; then
    echo "Resizing image to ${SIZE}"
    resize_image "${FILENAME}" "${SIZE}"
fi

# Execute command if provided
if [ -n "${COMMAND}" ]; then
    run_command "${FILENAME}" "${COMMAND}" || { echo "Command failed, exiting script."; exit 1; }
    #eval "${COMMAND}"
fi

# Execute script if provided
if [ -n "${SCRIPT}" ]; then
    run_command_script "${FILENAME}" "${SCRIPT}" || { echo "Script failed, exiting script."; exit 1; }
fi

# Interactive mode
if [ "${INTERACTIVE}" = true ]; then
    run_interactive_mode "${FILENAME}"
fi